<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/main.js">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/main.js" />
              <option name="originalContent" value="// Math Game for Kids&#10;const PUZZLE_KEY = 'mathgame_puzzles';&#10;const STATE_KEY = 'mathgame_state';&#10;&#10;let puzzles = [];&#10;let puzzleStack = [];&#10;let state = {&#10;  correct: 0,&#10;  wrong: 0,&#10;  current: null&#10;};&#10;&#10;function generatePuzzles() {&#10;  const all = [];&#10;  for (let a = 10; a &lt;= 99; a++) {&#10;    for (let b = 1; b &lt;= 9; b++) {&#10;      all.push({ a, b });&#10;    }&#10;  }&#10;  return all;&#10;}&#10;&#10;function shuffle(arr) {&#10;  for (let i = arr.length - 1; i &gt; 0; i--) {&#10;    const j = Math.floor(Math.random() * (i + 1));&#10;    [arr[i], arr[j]] = [arr[j], arr[i]];&#10;  }&#10;  return arr;&#10;}&#10;&#10;function saveState() {&#10;  localStorage.setItem(STATE_KEY, JSON.stringify(state));&#10;  localStorage.setItem(PUZZLE_KEY, JSON.stringify(puzzleStack));&#10;}&#10;&#10;function loadState() {&#10;  const s = localStorage.getItem(STATE_KEY);&#10;  const p = localStorage.getItem(PUZZLE_KEY);&#10;  if (s &amp;&amp; p) {&#10;    state = JSON.parse(s);&#10;    puzzleStack = JSON.parse(p);&#10;    return true;&#10;  }&#10;  return false;&#10;}&#10;&#10;function resetGame() {&#10;  state = { correct: 0, wrong: 0, current: null };&#10;  puzzles = generatePuzzles();&#10;  puzzleStack = shuffle([...puzzles]);&#10;  nextPuzzle();&#10;  saveState();&#10;  updateScore();&#10;}&#10;&#10;function nextPuzzle() {&#10;  if (puzzleStack.length === 0) {&#10;    puzzleStack = shuffle(generatePuzzles());&#10;  }&#10;  state.current = puzzleStack.pop();&#10;  saveState();&#10;  renderPuzzle();&#10;}&#10;&#10;function updateScore() {&#10;  document.getElementById('correct-count').textContent = state.correct;&#10;  document.getElementById('wrong-count').textContent = state.wrong;&#10;}&#10;&#10;function renderPuzzle() {&#10;  const { a, b } = state.current;&#10;  const correct = a + b;&#10;  let options = [correct, correct + 1, correct - 1];&#10;  options = Array.from(new Set(options)).filter(x =&gt; x &gt;= 0);&#10;  options = shuffle(options);&#10;  const puzzleDiv = document.getElementById('puzzle');&#10;  puzzleDiv.textContent = `${a} + ${b}`;&#10;  const answersDiv = document.getElementById('answers');&#10;  answersDiv.innerHTML = '';&#10;  options.forEach(opt =&gt; {&#10;    const btn = document.createElement('button');&#10;    btn.className = 'answer-btn';&#10;    btn.textContent = opt;&#10;    btn.onclick = () =&gt; selectAnswer(opt, correct);&#10;    answersDiv.appendChild(btn);&#10;  });&#10;  document.getElementById('overlay').style.display = 'none';&#10;}&#10;&#10;function selectAnswer(selected, correct) {&#10;  const btns = document.querySelectorAll('.answer-btn');&#10;  btns.forEach(btn =&gt; {&#10;    if (parseInt(btn.textContent) === correct) {&#10;      btn.classList.add('correct');&#10;    }&#10;    if (parseInt(btn.textContent) === selected) {&#10;      btn.classList.add(selected === correct ? 'correct' : 'wrong', 'selected');&#10;    }&#10;    btn.disabled = true;&#10;  });&#10;  if (selected === correct) {&#10;    state.correct++;&#10;  } else {&#10;    state.wrong++;&#10;  }&#10;  updateScore();&#10;  saveState();&#10;  document.getElementById('overlay').style.display = 'flex';&#10;}&#10;&#10;document.getElementById('overlay').onclick = () =&gt; {&#10;  nextPuzzle();&#10;};&#10;document.getElementById('reset-btn').onclick = () =&gt; {&#10;  resetGame();&#10;};&#10;&#10;window.onload = () =&gt; {&#10;  if (!loadState()) {&#10;    resetGame();&#10;  } else {&#10;    updateScore();&#10;    renderPuzzle();&#10;  }&#10;};&#10;" />
              <option name="updatedContent" value="// Math Game for Kids&#10;const PUZZLE_KEY = 'mathgame_puzzles';&#10;const STATE_KEY = 'mathgame_state';&#10;&#10;let puzzles = [];&#10;let puzzleStack = [];&#10;let state = {&#10;  correct: 0,&#10;  wrong: 0,&#10;  current: null&#10;};&#10;&#10;function generatePuzzles() {&#10;  const all = [];&#10;  for (let a = 10; a &lt;= 99; a++) {&#10;    for (let b = 1; b &lt;= 9; b++) {&#10;      all.push({ a, b });&#10;    }&#10;  }&#10;  return all;&#10;}&#10;&#10;function shuffle(arr) {&#10;  for (let i = arr.length - 1; i &gt; 0; i--) {&#10;    const j = Math.floor(Math.random() * (i + 1));&#10;    [arr[i], arr[j]] = [arr[j], arr[i]];&#10;  }&#10;  return arr;&#10;}&#10;&#10;function saveState() {&#10;  localStorage.setItem(STATE_KEY, JSON.stringify(state));&#10;  localStorage.setItem(PUZZLE_KEY, JSON.stringify(puzzleStack));&#10;}&#10;&#10;function loadState() {&#10;  const s = localStorage.getItem(STATE_KEY);&#10;  const p = localStorage.getItem(PUZZLE_KEY);&#10;  if (s &amp;&amp; p) {&#10;    state = JSON.parse(s);&#10;    puzzleStack = JSON.parse(p);&#10;    return true;&#10;  }&#10;  return false;&#10;}&#10;&#10;function resetGame() {&#10;  state = { correct: 0, wrong: 0, current: null };&#10;  puzzles = generatePuzzles();&#10;  puzzleStack = shuffle([...puzzles]);&#10;  nextPuzzle();&#10;  saveState();&#10;  updateScore();&#10;}&#10;&#10;function nextPuzzle() {&#10;  if (puzzleStack.length === 0) {&#10;    puzzleStack = shuffle(generatePuzzles());&#10;  }&#10;  state.current = puzzleStack.pop();&#10;  saveState();&#10;  renderPuzzle();&#10;}&#10;&#10;function updateScore() {&#10;  document.getElementById('correct-count').textContent = state.correct;&#10;  document.getElementById('wrong-count').textContent = state.wrong;&#10;}&#10;&#10;function renderPuzzle() {&#10;  const { a, b } = state.current;&#10;  const correct = a + b;&#10;  let options = [correct, correct + 1, correct - 1];&#10;  options = Array.from(new Set(options)).filter(x =&gt; x &gt;= 0);&#10;  options = shuffle(options);&#10;  const puzzleDiv = document.getElementById('puzzle');&#10;  // Render each part as a span for independent animation&#10;  puzzleDiv.innerHTML = `&#10;    &lt;span class=&quot;puzzle-digit a&quot;&gt;${a}&lt;/span&gt;&#10;    &lt;span class=&quot;puzzle-digit op&quot;&gt;+&lt;/span&gt;&#10;    &lt;span class=&quot;puzzle-digit b&quot;&gt;${b}&lt;/span&gt;&#10;  `;&#10;  const answersDiv = document.getElementById('answers');&#10;  answersDiv.innerHTML = '';&#10;  options.forEach(opt =&gt; {&#10;    const btn = document.createElement('button');&#10;    btn.className = 'answer-btn';&#10;    btn.textContent = opt;&#10;    btn.onclick = () =&gt; selectAnswer(opt, correct);&#10;    answersDiv.appendChild(btn);&#10;  });&#10;  document.getElementById('overlay').style.display = 'none';&#10;}&#10;&#10;function selectAnswer(selected, correct) {&#10;  const btns = document.querySelectorAll('.answer-btn');&#10;  btns.forEach(btn =&gt; {&#10;    if (parseInt(btn.textContent) === correct) {&#10;      btn.classList.add('correct');&#10;    }&#10;    if (parseInt(btn.textContent) === selected) {&#10;      btn.classList.add(selected === correct ? 'correct' : 'wrong', 'selected');&#10;    }&#10;    btn.disabled = true;&#10;  });&#10;  if (selected === correct) {&#10;    state.correct++;&#10;  } else {&#10;    state.wrong++;&#10;  }&#10;  updateScore();&#10;  saveState();&#10;  document.getElementById('overlay').style.display = 'flex';&#10;}&#10;&#10;document.getElementById('overlay').onclick = () =&gt; {&#10;  nextPuzzle();&#10;};&#10;document.getElementById('reset-btn').onclick = () =&gt; {&#10;  resetGame();&#10;};&#10;&#10;window.onload = () =&gt; {&#10;  if (!loadState()) {&#10;    resetGame();&#10;  } else {&#10;    updateScore();&#10;    renderPuzzle();&#10;  }&#10;};" />
            </PendingDiffInfo>
          </value>
        </entry>
        <entry key="$PROJECT_DIR$/style.css">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/style.css" />
              <option name="originalContent" value="body {&#10;  background: #fff8e1;&#10;  color: #222;&#10;  font-family: 'Fredoka One', 'Chewy', 'Luckiest Guy', 'Comic Neue', 'Orbitron', Arial, sans-serif;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  min-height: 100vh;&#10;  margin: 0;&#10;}&#10;#scoreboard {&#10;  position: fixed;&#10;  top: 32px;&#10;  right: 40px;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 18px;&#10;  background: #fff;&#10;  color: #222;&#10;  border-radius: 18px;&#10;  padding: 12px 24px;&#10;  font-size: 2.5rem;&#10;  font-weight: bold;&#10;  text-shadow: 2px 2px 8px #000;&#10;  z-index: 1100;&#10;  box-shadow: 0 2px 12px #ffe082;&#10;}&#10;#reset-btn {&#10;  margin: 0;&#10;  padding: 0;&#10;  background: none;&#10;  border: none;&#10;  border-radius: 50%;&#10;  width: 48px;&#10;  height: 48px;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  cursor: pointer;&#10;  box-shadow: none;&#10;  transition: background 0.2s;&#10;}&#10;#reset-btn:hover, #reset-btn:focus {&#10;  background: rgba(255, 215, 0, 0.18);&#10;}&#10;#reset-btn svg {&#10;  display: block;&#10;}&#10;#correct-count {&#10;  color: #ff9800;&#10;}&#10;#wrong-count {&#10;  color: #d32f2f;&#10;}&#10;#puzzle-container {&#10;  margin-top: 80px;&#10;  position: relative;&#10;  width: 100vw;&#10;  min-height: 350px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;}&#10;#puzzle {&#10;  font-size: 12rem;&#10;  color: #ff9800;&#10;  text-shadow: 0 0 8px #ffe082, 2px 2px 12px #fff;&#10;  margin-bottom: 60px;&#10;  font-family: 'Fredoka One', 'Chewy', 'Luckiest Guy', 'Comic Neue', 'Orbitron', Arial, sans-serif;&#10;  letter-spacing: 4px;&#10;  user-select: none;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  gap: 0.2em;&#10;}&#10;.puzzle-digit {&#10;  display: inline-block;&#10;  animation: digit-heartbeat 2.8s infinite cubic-bezier(.4,0,.6,1);&#10;}&#10;.puzzle-digit.b {&#10;  animation-delay: 1.4s;&#10;}&#10;.puzzle-digit.op {&#10;  animation-delay: 0.7s;&#10;}&#10;@keyframes digit-heartbeat {&#10;  0% { transform: scale(1); }&#10;  10% { transform: scale(1.06); }&#10;  15% { transform: scale(0.98); }&#10;  20% { transform: scale(1.04); }&#10;  25% { transform: scale(1); }&#10;  100% { transform: scale(1); }&#10;}&#10;#answers {&#10;  display: flex;&#10;  gap: 40px;&#10;}&#10;.answer-btn {&#10;  font-size: 2.2rem;&#10;  padding: 12px 28px;&#10;  border-radius: 18px;&#10;  border: 3px solid #ff9800;&#10;  background: #fffde7;&#10;  color: #ff9800;&#10;  font-family: 'Fredoka One', 'Chewy', 'Luckiest Guy', 'Comic Neue', 'Orbitron', Arial, sans-serif;&#10;  font-weight: bold;&#10;  box-shadow: 2px 2px 10px #ffe082;&#10;  cursor: pointer;&#10;  transition: background 0.2s, color 0.2s, box-shadow 0.2s, border 0.2s;&#10;}&#10;.answer-btn.selected {&#10;  background: #ffe0b2;&#10;  color: #222;&#10;  box-shadow: 0 0 20px #ffe082;&#10;}&#10;.answer-btn.correct {&#10;  background: #43a047;&#10;  color: #fff;&#10;  box-shadow: 0 0 20px #43a047;&#10;  border-color: #43a047;&#10;}&#10;.answer-btn.wrong {&#10;  background: #d32f2f;&#10;  color: #fff;&#10;  box-shadow: 0 0 20px #d32f2f;&#10;  border-color: #d32f2f;&#10;}&#10;#overlay {&#10;  position: fixed;&#10;  top: 0; left: 0; right: 0; bottom: 0;&#10;  background: rgba(255, 255, 0, 0); /* fully transparent */&#10;  z-index: 1000;&#10;  cursor: pointer;&#10;  display: flex;&#10;}&#10;" />
              <option name="updatedContent" value="body {&#10;  background: #fff8e1;&#10;  color: #222;&#10;  font-family: 'Fredoka One', 'Chewy', 'Luckiest Guy', 'Comic Neue', 'Orbitron', Arial, sans-serif;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;  min-height: 100vh;&#10;  margin: 0;&#10;}&#10;#scoreboard {&#10;  position: fixed;&#10;  top: 32px;&#10;  right: 40px;&#10;  display: flex;&#10;  align-items: center;&#10;  gap: 18px;&#10;  background: #fff;&#10;  color: #222;&#10;  border-radius: 18px;&#10;  padding: 12px 24px;&#10;  font-size: 2.5rem;&#10;  font-weight: bold;&#10;  text-shadow: 2px 2px 8px #000;&#10;  z-index: 1100;&#10;  box-shadow: 0 2px 12px #ffe082;&#10;}&#10;#reset-btn {&#10;  margin: 0;&#10;  padding: 0;&#10;  background: none;&#10;  border: none;&#10;  border-radius: 50%;&#10;  width: 48px;&#10;  height: 48px;&#10;  display: flex;&#10;  align-items: center;&#10;  justify-content: center;&#10;  cursor: pointer;&#10;  box-shadow: none;&#10;  transition: background 0.2s;&#10;}&#10;#reset-btn:hover, #reset-btn:focus {&#10;  background: rgba(255, 215, 0, 0.18);&#10;}&#10;#reset-btn svg {&#10;  display: block;&#10;}&#10;#correct-count {&#10;  color: #ff9800;&#10;}&#10;#wrong-count {&#10;  color: #d32f2f;&#10;}&#10;#puzzle-container {&#10;  margin-top: 80px;&#10;  position: relative;&#10;  width: 100vw;&#10;  min-height: 350px;&#10;  display: flex;&#10;  flex-direction: column;&#10;  align-items: center;&#10;}&#10;#puzzle {&#10;  font-size: 12rem;&#10;  color: #ff9800;&#10;  text-shadow: 0 0 8px #ffe082, 2px 2px 12px #fff;&#10;  margin-bottom: 60px;&#10;  font-family: 'Fredoka One', 'Chewy', 'Luckiest Guy', 'Comic Neue', 'Orbitron', Arial, sans-serif;&#10;  letter-spacing: 4px;&#10;  user-select: none;&#10;  display: flex;&#10;  justify-content: center;&#10;  align-items: center;&#10;  gap: 0.2em;&#10;}&#10;.puzzle-digit {&#10;  display: inline-block;&#10;  animation: digit-heartbeat 1.2s infinite cubic-bezier(.4,0,.6,1);&#10;}&#10;.puzzle-digit.a {&#10;  animation-delay: 0s;&#10;}&#10;.puzzle-digit.op {&#10;  animation-delay: 0.08s;&#10;}&#10;.puzzle-digit.b {&#10;  animation-delay: 0.16s;&#10;}&#10;@keyframes digit-heartbeat {&#10;  0% { transform: scale(1); }&#10;  10% { transform: scale(1.06); }&#10;  15% { transform: scale(0.98); }&#10;  20% { transform: scale(1.04); }&#10;  28% { transform: scale(1); }&#10;  100% { transform: scale(1); }&#10;}&#10;#answers {&#10;  display: flex;&#10;  gap: 40px;&#10;}&#10;.answer-btn {&#10;  font-size: 2.2rem;&#10;  padding: 12px 28px;&#10;  border-radius: 18px;&#10;  border: 3px solid #ff9800;&#10;  background: #fffde7;&#10;  color: #ff9800;&#10;  font-family: 'Fredoka One', 'Chewy', 'Luckiest Guy', 'Comic Neue', 'Orbitron', Arial, sans-serif;&#10;  font-weight: bold;&#10;  box-shadow: 2px 2px 10px #ffe082;&#10;  cursor: pointer;&#10;  transition: background 0.2s, color 0.2s, box-shadow 0.2s, border 0.2s;&#10;}&#10;.answer-btn.selected {&#10;  background: #ffe0b2;&#10;  color: #222;&#10;  box-shadow: 0 0 20px #ffe082;&#10;}&#10;.answer-btn.correct {&#10;  background: #43a047;&#10;  color: #fff;&#10;  box-shadow: 0 0 20px #43a047;&#10;  border-color: #43a047;&#10;}&#10;.answer-btn.wrong {&#10;  background: #d32f2f;&#10;  color: #fff;&#10;  box-shadow: 0 0 20px #d32f2f;&#10;  border-color: #d32f2f;&#10;}&#10;#overlay {&#10;  position: fixed;&#10;  top: 0; left: 0; right: 0; bottom: 0;&#10;  background: rgba(255, 255, 0, 0); /* fully transparent */&#10;  z-index: 1000;&#10;  cursor: pointer;&#10;  display: flex;&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>